openapi: 3.0.0
info:
  title: Admins API
  description: API to manage admin data.
  version: 1.0.0

paths:
  /admins:
    post:
      summary: Create a new admin.
      description: Creates a new admin with the provided details.
      operationId: create_admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminCreate'
      responses:
        '201':
          description: Admin created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminOut'
        '409':
          description: Username or email already in use.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERROR'
        '422':
          description: Incomplete admin payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERROR'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERROR'

    get:
      summary: Get all admins.
      description: Returns a list of all the admins and their details.
      operationId: get_all_admins
      responses:
        '202':
          description: List of admin details.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdminOut'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERROR'

  /admins/{id}:
    get:
      summary: Get user by id.
      description: Retrieves user information by id.
      operationId: get_admin
      parameters:
        - in: path
          name: id
          required: true
          description: Id of the admin to retrieve.
          schema:
            type: string
            example: "681293f60d3eebd21ae7dad4"
      responses:
        '200':
          description: Admin found successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminOut'
        '404':
          description: Admin not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERROR'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERROR'

    delete:
      summary: Delete admin by id.
      description: Delete admin information by its id.
      operationId: delete_admin
      parameters:
        - in: path
          name: id
          required: true
          description: Id of the admin to delete.
          schema:
            type: string
            example: "681293f60d3eebd21ae7dad4"
      responses:
        '204':
          description: Admin deleted successfully.
        '404':
          description: Admin not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERROR'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERROR'

  /admins/login:
    post:
      summary: Admin login
      description: Authenticates an admin and returns a JWT access token.
      operationId: login_admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: admin123@example.com
                password:
                  type: string
                  example: securepassword
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: >-
                      eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2ODE2ODg1OGI4NDE4MDRhMWEwYTE1NzUiLCJlbWFpbCI6ImFkbWluMTIzQGV4YW1wbGUuY29tIiwiZXhwIjoxNzQ2MzcyNjE1fQ.HVajTCJ0WHDOpjaZ7UmQd1gStcIo-8H3Pc3iVeOp9EY
                  token_type:
                    type: string
                    example: bearer
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERROR'
              example:
                detail: Invalid credentials
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERROR'
              example:
                detail: Server error during login

components:
  schemas:
    AdminCreate:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: "Username"
        email:
          type: string
          format: email
          example: "admin@example.com"
        password:
          type: string
          example: "832ikjsa8rqtlkqf"

    AdminOut:
      type: object
      properties:
        id:
          type: string
          example: "681293f60d3eebd21ae7dad4"
        username:
          type: string
          example: "Username"
        password:
          type: string
          example: "poqdsf?98y132poiahd"
        registration_date:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"

    ERROR:
      type: object
      properties:
        detail:
          type: string
